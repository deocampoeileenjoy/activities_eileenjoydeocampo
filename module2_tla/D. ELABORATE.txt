This document describes the requirements for writing API specifications for the Java platform. The specification for each Java TM platform API library is made up of its Javadoc comments and additional support documentation called out in the doc comments.

This document has five sections that correspond to the sections of an API specification
    
Top-Level Specification

The top-level specification is composed of those specifications that apply to the entire set of packages. It can include assumptions that underlie the other specifications, such as all objects are presumed to be thread-safe unless otherwise specified.
In addition to the class specific requirements, there are overall Java platform API documentation requirements with respect to handling unchecked exceptions (exceptions that derive from java.lang.RuntimeException). It would be helpful to develop some blanket
statements that describe the general situations when a Java application should be prepared to encounter one or more RuntimeExceptions.
 
Package Specification

The Package specification includes any specifications that apply to the package as a whole or to groups of classes in the package. It must include:
 Executive summary - A precise and concise description of the package. Useful to describe groupings of classes and introduce major terms. 
 OS/Hardware Dependencies - Specify any reliance on the underlying operating system or hardware. For example, the java.awt package might describe how the general behavior in that package is allowed to vary from one operating system to another (such as Windows,
 Solaris and Macintosh). 
 References to any external specifications. These are package-wide specifications beyond those generated by Javadoc by Sun or third-parties. An example is the UNICODE specification for the java.text package. These references can be links to specifications published
 on the Internet, or titles of specifications available only in print form. The references must be only as narrow or broad in scope as the specification requires. That is, if only a section of a referenced document is considered part of the API spec, then you should link
 or refer to only that section (and can separately refer to the non-spec of the document as a "related" document). The idea is to clearly delineate what is part of the API spec and what is not. 
For details about how to actually structure the package information in the package.html file according to Java Software standards
  
Class/Interface Specification

This section applies to Java classes and interfaces. Each class and interface specification must include:
Executive summary - A precise and concise description for the object. Useful to describe groupings of methods and introduce major terms.  
State Information - Specify the state information associated with the object, described in a manner that decouples the states from the operations that may query or change these states. This should also include whether instances of this class are thread safe. (For multi-state objects, 
a state diagram may be the clearest way to present this information.) If the class allows only single state instances, such as java.lang.Integer, and for interfaces, this section may be skipped.
OS/Hardware Dependencies - Specify any reliance on the underlying operating system or hardware. 
Allowed Implementation Variances - Specify how any aspect of this object that may vary by implementation. This description should not include information about current Java Software implementation bugs.
Security Constraints - If the object has any security constraints or restrictions, an overview of those constraints and restrictions must be provided in the class specification. Documentation for individual security constrained methods must provide detailed information about security constraints.
Serialized Form - This spec ensures that a serialized object can successfully be passed between different implementations of the Java Platform. While public classes that implement serializable are part of the serialized form, note that in some cases it is also necessary to include non-public 
classes that implement serializable. The serialized form spec defines the readObject and writeObject methods, the fields that are serialized, the data types of those fields, and the order those fields are serialized. 
References to any External Secifications - These are class-level specifications written by Sun or third parties beyond those generated by Javadoc. References are not necessary here if they have been included in the Package specification.
        
Field Specification

Each field specification must include:
 What this field models - Specify what aspect of the object this field models. 
Range of valid values - Specify all valid and invalid values for this field. 
For each public and protected static final field whose type is a primitive or String, specify its value. (A future version of Javadoc will automatically add this value to the spec, but until then please type the value into the body of the comment.)
Null Value - If this is a reference field, a statement concerning whether this value may be null, and how this object will behave in such a case
  

Method Specification

This section applies to Java methods and constructors. Each method and constructor specification must include:
Expected Behavior - Specify the expected or desired behavior of this operation. Describe what aspect of the object being modeled this operation fulfills. All examples below include this.
State Transitions - Specify what state transitions this operation may trigger. 
Range of Valid Argument Values - Specify all valid and invalid values for each argument, including expected behavior for invalid input value or range of values.
Null Argument Values - For each reference type argument, specify the behavior when null is passed in. See  two examples. NOTE: If possible, document the general null argument behavior at the package or class level, such as causing a java.lang.NullPointerException to be thrown. Deviations from this behavior can then be documented at the method level.
Range of Return Values - Specify the range of possible return values, including where the return value may be null. 
Algorithms Defined - When required by the specification, specify the algorithms used by this operation. 
OS/Hardware Dependencies - Specify any reliance on the underlying operating system or hardware. 
Allowed Implementation Variances - Specify what behavior may vary by implementation. This description should not include information about current Java Software implementation bugs. 
Cause of Exceptions - Specify the exceptions thrown by the method, include the argument values, state, or context that will cause the specified exception to be thrown. The exceptions thrown from a method need not be mutually exclusive. See  example. For more detail about which exceptions to document, see Documenting Exceptions with the @throws Tag.
Security Constraints - If this operation may be security constrained, must specify the security check used to constrain this operation. Mention if the method is implemented using a AccessController.doPrivileged construct. Also must include a general description of the context or situations where this method may be security constrained. 
